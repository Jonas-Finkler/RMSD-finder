# Copyright (C) 2020 Jonas A. Finkler
#
# This program is free software: you can redistribute it and/or modify
# it under the terms of the GNU General Public License as published by
# the Free Software Foundation, either version 3 of the License, or
# (at your option) any later version.
#
# This program is distributed in the hope that it will be useful,
# but WITHOUT ANY WARRANTY; without even the implied warranty of
# MERCHANTABILITY or FITNESS FOR A PARTICULAR PURPOSE.  See the
# GNU General Public License for more details.
#
# You should have received a copy of the GNU General Public License
# along with this program.  If not, see <http://www.gnu.org/licenses/>.



def main():
    nquats = list(range(100,2100,100))

    out = '''
! Copyright (C) 2020 Jonas A. Finkler
! 
! This program is free software: you can redistribute it and/or modify
! it under the terms of the GNU General Public License as published by
! the Free Software Foundation, either version 3 of the License, or
! (at your option) any later version.
! 
! This program is distributed in the hope that it will be useful,
! but WITHOUT ANY WARRANTY; without even the implied warranty of
! MERCHANTABILITY or FITNESS FOR A PARTICULAR PURPOSE.  See the
! GNU General Public License for more details.
! 
! You should have received a copy of the GNU General Public License
! along with this program.  If not, see <http://www.gnu.org/licenses/>.
   
'''

    out += 'module quaternionLists \n'
    out += '  ! This file was auto generated by genQuatCode.py \n'
    out += '  use precision \n'
    out += '  implicit none \n\n'


    for i in nquats:
        print(i)
        varname = 'quatlist_' + str(i)
        f = open("../resources/quaternionlists/{:04d}.quats".format(i))
        out += '  real(dp), parameter, dimension(4,' + str(i) + ') :: ' + varname + ' = reshape([ &\n'
        f.readline()
        o = False
        for line in f:
            if o:
                out += ', &\n'
            else:
                o = True
            s = line.split()
            s = [x if '-' in x else ' ' + x for x in s]
            out += '    ' + '_dp, '.join(s) + '_dp'

        f.close()
        out += ' &\n    ], shape(' + varname + ')) \n\n'


    out += '  contains'
    out += '''
  subroutine getQuaternionList(n, quats)
    integer, intent(in) :: n
    real(dp), intent(out) :: quats(4,n)
    select case(n)'''
    for i in nquats:
        out += '''
      case ({})
        quats = quatlist_{}'''.format(i, i)
    out += '''
      case default
        print*, 'Error: No quaternion list with n=', n, 'available!'
        stop
    end select
  end subroutine
'''

    out += 'end module'
    print(out)

    f = open('../src/rmsd/quaternionLists.f90', 'w')
    f.write(out)
    f.close()

if __name__ == '__main__':
    main()